{"version":3,"sources":["../node_modules/jspdf/dist sync","logo.svg","Table_Material.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Table_Material","useState","persons","setPersons","setErrorMessages","useEffect","axios","get","then","res","console","log","data","catch","error","title","columns","field","hidden","options","search","exportButton","actionsColumnIndex","editable","onRowUpdate","newData","oldData","Promise","put","dataUpdate","tableData","handleRowUpdate","onRowAdd","post","dataToAdd","push","handleRowAdd","onRowDelete","delete","params","dataDelete","index","splice","handleRowDelete","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uFAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,gFCRzBF,EAAOC,QAAU,IAA0B,kC,gLCI9BE,EAAiB,WAAO,IAAD,EAEFC,mBAAS,IAFP,mBAEzBC,EAFyB,KAEhBC,EAFgB,OAGUF,mBAAS,IAHnB,mBAGVG,GAHU,WAKhCC,qBAAU,WACcC,IAAMC,IAAI,0BACzBC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChBT,EAAWM,EAAIG,SAElBC,OAAM,SAAAC,GACHV,EAAiB,CAAC,+BAE3B,IA+CH,OACI,6BACI,kBAAC,IAAD,CAAeW,MAAM,UACjBH,KAAMV,EACNc,QAjDU,CAClB,CACID,MAAO,KAAME,MAAO,KAAMC,QAAQ,GAEtC,CACIH,MAAO,OAAQE,MAAO,QAE1B,CACIF,MAAO,MAAOE,MAAO,QA0CjBE,QAAS,CACLC,QAAQ,EACRC,cAAc,EACdC,oBAAqB,GAEzBC,SAAU,CACNC,YAAa,SAACC,EAASC,GAAV,OACT,IAAIC,SAAQ,SAAC/B,IAvBT,SAAC6B,EAASC,EAAS9B,GACvCU,IAAMsB,IAAI,wBAAyBH,GAC9BjB,MAAK,SAAAC,GACF,IAAMoB,EAAU,YAAO3B,GAEvB2B,EADcH,EAAQI,UAAU/B,IACZ0B,EACpBtB,EAAW,YAAI0B,IACfjC,OAiBYmC,CAAgBN,EAASC,EAAS9B,OAE1CoC,SAAU,SAACP,GAAD,OACN,IAAIE,SAAQ,SAAC/B,IAjDZ,SAAC6B,EAAS7B,GAC3BU,IAAM2B,KAAK,qBAAsBR,GAC5BjB,MAAK,SAAAC,GACFgB,EAAQ1B,GAAKU,EAAIG,KACjB,IAAIsB,EAAS,YAAOhC,GACpBgC,EAAUC,KAAKV,GACftB,EAAW+B,GACXtC,OA2CYwC,CAAaX,EAAS7B,OAE9ByC,YAAa,SAACX,GAAD,OACT,IAAIC,SAAQ,SAAC/B,IA1CT,SAAC8B,EAAS9B,GAC9BU,IAAMgC,OAAO,wBAAyB,CAAEC,OAAQ,CAAExC,GAAI2B,EAAQ3B,MACzDS,MAAK,SAAAC,GACF,IAAM+B,EAAU,YAAOtC,GACjBuC,EAAQf,EAAQI,UAAU/B,GAChCyC,EAAWE,OAAOD,EAAO,GACzBtC,EAAW,YAAIqC,IACf5C,OAoCY+C,CAAgBjB,EAAS9B,Y,cC3BtCgD,MATf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,QC1CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAM+C,c","file":"static/js/main.d1fcc4e5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 430;","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport const Table_Material = () => {\r\n\r\n    const [persons, setPersons] = useState([]);\r\n    const [errorMessages, setErrorMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const customData2 = axios.get(\"/api/v1/person/get_all\")\r\n            .then(res => {\r\n                console.log(res.data);\r\n                setPersons(res.data);\r\n            })\r\n            .catch(error => {\r\n                setErrorMessages([\"Cannot load user data\"]);\r\n            });\r\n    }, []);\r\n\r\n    const customColumns = [\r\n        {\r\n            title: 'ID', field: 'id', hidden: true,\r\n        },\r\n        {\r\n            title: 'Name', field: 'name'\r\n        },\r\n        {\r\n            title: 'Age', field: 'age'\r\n        }\r\n    ]\r\n\r\n    const handleRowAdd = (newData, resolve) => {\r\n        axios.post(\"/api/v1/person/add\", newData)\r\n            .then(res => {\r\n                newData.id = res.data; // hack -> set ID from the response\r\n                let dataToAdd = [...persons];\r\n                dataToAdd.push(newData);\r\n                setPersons(dataToAdd);\r\n                resolve()\r\n            })\r\n    }\r\n\r\n    const handleRowDelete = (oldData, resolve) => {\r\n        axios.delete(\"/api/v1/person/delete\", { params: { id: oldData.id } })\r\n            .then(res => {\r\n                const dataDelete = [...persons];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setPersons([...dataDelete]);\r\n                resolve();\r\n            })\r\n    }\r\n\r\n    const handleRowUpdate = (newData, oldData, resolve) => {\r\n        axios.put(\"/api/v1/person/update\", newData)\r\n            .then(res => {\r\n                const dataUpdate = [...persons];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setPersons([...dataUpdate]);\r\n                resolve();\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MaterialTable title=\"Persons\"\r\n                data={persons}\r\n                columns={customColumns}\r\n                options={{\r\n                    search: false,\r\n                    exportButton: true,\r\n                    actionsColumnIndex: -1,\r\n                }}\r\n                editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowUpdate(newData, oldData, resolve);\r\n                        }),\r\n                    onRowAdd: (newData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowAdd(newData, resolve)\r\n                        }),\r\n                    onRowDelete: (oldData) =>\r\n                        new Promise((resolve) => {\r\n                            handleRowDelete(oldData, resolve)\r\n                        }),\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport { Table_Material } from \"./Table_Material\";\r\nimport { Table_ReactStrap } from \"./Table_ReactStrap\";\r\nimport 'react-app-polyfill/stable';\r\n\r\n/*const ShowUsers = () => {\r\n\r\n  const [userProfiles, setUserProfiles] = useState([]);\r\n\r\n  const fetchUserProfiles = () => {\r\n    axios.get(\"/api/v1/person/get_all\").then(res => {\r\n      console.log(res);\r\n      setUserProfiles(res.data);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUserProfiles();\r\n  }, []);\r\n\r\n  return userProfiles.map((userProfile, index) => {\r\n    \r\n      return (\r\n        <div key={index}>\r\n          <h1>{userProfile.name}</h1>\r\n          <p>{userProfile.id}</p>\r\n        </div>\r\n      )\r\n    })\r\n};\r\n\r\nconst LabaTest = () => {\r\n  const[persons, setPersons] = useState([]);\r\n\r\n  const getPersons = () => {\r\n    const data = axios.get(\"/api/v1/person/get_all\").then(res => {\r\n      console.log(res)\r\n    });\r\n  };\r\n    \r\n  useEffect(() => {\r\n    getPersons();\r\n  }, []);\r\n\r\n  return <p>Hello</p>;\r\n}*/\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <ShowUsers /> */}\r\n      <Table_Material />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}